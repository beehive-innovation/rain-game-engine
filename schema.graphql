type GameAssetsFactory @entity {
  #{GameAssetsFactory.address}
  id: ID!
  implementation: Bytes!
  #GameAssets deployed by factory
  children: [GameAsset!] 
}

type GameAsset @entity {
  #{GameAsset.address}
  id: ID!
  # Increment by 1 after each new assets creation
  totalAssets: BigInt!
  # Get it from _config from Initialize event for first time.
  # After get it from TransferOwnership event.
  owner: Bytes!
  # Get it from AdminChanged event
  admin: Bytes!
  # Get it from BaseURIChanged event
  baseURI: String!
  # Add Creator.id from CreatorAdded event
  # Remove Creator.id from CreatorRemoved event
  creators: [Creator!]
  # Add AssetClass.id from ClassCreated event
  classes: [AssetClass!]
  # Add Asset.id from AssetCreated event
  assets: [Asset!]
  # Add new Holder from TransferSingle or TransferBatch event
  holders: [Holder!]
  # event.block.number
  deployBlock: BigInt!
  # event.block.timestamp
  deployTimestamp: BigInt!
}

type Asset @entity {
  #{GameAsset.address}-{event.params._asset._assetId} 
  id: ID!
  # event.params._name
  name: String!
  # event.params._descciption
  descciption: String!
  # event.params._asset._assetId
  assetId: BigInt!
  # event.params._asset.creator
  creator: Bytes!
  # event.params._asset.lootBoxId
  lootBoxID: BigInt!
  # event.params._asset._priceConfig
  priceConfig: PriceConfig!
  # event.params._asset._canMintConfig
  canMintConfig: CanMintConfig!
  # event.params._asset.currencies
  currencies: [String!]!
  # event.params._asset.assetClass
  assetClass: AssetClass!
  # event.params._asset.rarity
  rarity: Int!
  # event.block.number
  creationBlock: BigInt!
  # event.block.timestamp
  creationTimestamp: BigInt!
}

# create from ClassCreated event
type AssetClass @entity{
  #{GameAsset.address}-{event.params._classId} 
  id: ID!
  # event.params._name
  name: String!
  # event.params._description
  descciption: String!
  # event.params._attributes
  attributes: [String!]!
}

# create from AssetCreated event
type PriceConfig @entity {
  #{GameAsset.address}-{event.params._asset._assetId}
  id: ID!
  # event.params._asset._priceConfig.sources
  sources: [Bytes!]!
  # event.params._asset._priceConfig.constants
  constants: [BigInt!]!
  # event.params._asset._priceConfig.stackLength
  stackLength: BigInt!
  # event.params._asset._priceConfig.argumentsLength
  argumentsLength: BigInt!
}

# create from AssetCreated event
type CanMintConfig @entity {
  #{GameAsset.address}-{event.params._asset._assetId}
  id: ID!
  # event.params._asset._priceConfig.sources
  sources: [Bytes!]!
  # event.params._asset._priceConfig.constants
  constants: [BigInt!]!
  # event.params._asset._priceConfig.stackLength
  stackLength: BigInt!
  # event.params._asset._priceConfig.argumentsLength
  argumentsLength: BigInt!
}

# Create from CreatorAdded event
type Creator @entity{
  #{GameAsset.address}-{event.params._addedCreator}
  id: ID!
  # event.params._addedCreator
  address: Bytes!
  # add Asset created by this creator.
  # From AssetCreated event
  assetesCreated: [Asset!]
}

# Create on every TransferSingle or TransferBatch event
type Holder @entity {
  #{GameAsset.address}-{event.params.to}
  id: ID!
  # event.params.to
  address: Bytes!
  # Add AssetsOwned by this user on every TransferSingle or TransferBatch event
  assetsOwned: [AssetsOwned!]
}

type AssetsOwned @entity {
  # {GameAsset.address}-{Receiver}-{event.params.id}
  id: ID!
  # Asset that is minted or transferd
  asset: Asset!
  # Id od that Asset
  assetId: BigInt!
  # TotalNumber of assets Owned of AssetId
  # Increament for every AssetId.
  count: BigInt!
}